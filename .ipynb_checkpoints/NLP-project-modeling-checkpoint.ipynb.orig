{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import nltk\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.svm import SVC, LinearSVC\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.decomposition import TruncatedSVD\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from imblearn.over_sampling import BorderlineSMOTE\n",
    "from sklearn import svm\n",
    "\n",
    "from scipy import stats\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "import seaborn as sns\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "from collections import Counter\n",
    "from nltk.data import load\n",
    "from collections import deque\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "combined = pd.read_csv('./wordBag.csv', sep = '\\t')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "drop the duplicates based on lyrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(419887, 4)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "302368"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(combined.lyrics.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = combined.drop_duplicates(['lyrics'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(302368, 4)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>song</th>\n",
       "      <th>lyrics</th>\n",
       "      <th>artist</th>\n",
       "      <th>wordBag</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ego-remix</td>\n",
       "      <td>Oh baby, how you doing?\\nYou know I'm gonna cu...</td>\n",
       "      <td>beyonce-knowles</td>\n",
       "      <td>oh baby you know i gon na cut right chase some...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>then-tell-me</td>\n",
       "      <td>playin' everything so easy,\\nit's like you see...</td>\n",
       "      <td>beyonce-knowles</td>\n",
       "      <td>playin everything easy like seem sure still wa...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>honesty</td>\n",
       "      <td>If you search\\nFor tenderness\\nIt isn't hard t...</td>\n",
       "      <td>beyonce-knowles</td>\n",
       "      <td>if search for tenderness it hard find you love...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>you-are-my-rock</td>\n",
       "      <td>Oh oh oh I, oh oh oh I\\n[Verse 1:]\\nIf I wrote...</td>\n",
       "      <td>beyonce-knowles</td>\n",
       "      <td>oh oh oh i oh oh oh i verse if i wrote book st...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>black-culture</td>\n",
       "      <td>Party the people, the people the party it's po...</td>\n",
       "      <td>beyonce-knowles</td>\n",
       "      <td>party people people party popping sitting arou...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              song                                             lyrics  \\\n",
       "0        ego-remix  Oh baby, how you doing?\\nYou know I'm gonna cu...   \n",
       "1     then-tell-me  playin' everything so easy,\\nit's like you see...   \n",
       "2          honesty  If you search\\nFor tenderness\\nIt isn't hard t...   \n",
       "3  you-are-my-rock  Oh oh oh I, oh oh oh I\\n[Verse 1:]\\nIf I wrote...   \n",
       "4    black-culture  Party the people, the people the party it's po...   \n",
       "\n",
       "            artist                                            wordBag  \n",
       "0  beyonce-knowles  oh baby you know i gon na cut right chase some...  \n",
       "1  beyonce-knowles  playin everything easy like seem sure still wa...  \n",
       "2  beyonce-knowles  if search for tenderness it hard find you love...  \n",
       "3  beyonce-knowles  oh oh oh i oh oh oh i verse if i wrote book st...  \n",
       "4  beyonce-knowles  party people people party popping sitting arou...  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Try subtract artists with less than five songs, as it is too hard for us to identify the artists with such few samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# filter artists with less than a certain number of songs in the data set\n",
    "def filtering(df, n):\n",
    "    count = df.artist.value_counts()\n",
    "    artist = pd.DataFrame({'artist': count.index, 'counts': count.values})\n",
    "    less_artist = artist[artist['counts']< n]\n",
    "    key_diff = set(df.artist).difference(less_artist.artist)\n",
    "    where_diffkey = df.artist.isin(key_diff)\n",
    "    data_s = df[where_diffkey]\n",
    "    return data_s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_s = filtering(data, 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(116107, 4)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_s.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a1df5bb00>"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_s.artist.value_counts().hist(bins = 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    706.000000\n",
       "mean     164.457507\n",
       "std       75.306892\n",
       "min      100.000000\n",
       "25%      118.000000\n",
       "50%      147.000000\n",
       "75%      175.000000\n",
       "max      703.000000\n",
       "Name: artist, dtype: float64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_s.artist.value_counts().describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# baseline model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sample % data to check the baseline model\n",
    "data_sample = pd.DataFrame.sample(data_s, 20000, random_state = 124)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# split the data into training and test dataset\n",
    "train, test = train_test_split(data_s, test_size=0.2, random_state = 124)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Filter both train and test to make sure that they have same amount of artists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_s = filtering(train, 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_m = train_s[train_s['artist'].isin(test.artist)]\n",
    "test_m = test[test.artist.isin(train_s.artist)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    706.000000\n",
       "mean     131.565156\n",
       "std       60.251312\n",
       "min       72.000000\n",
       "25%       94.000000\n",
       "50%      117.000000\n",
       "75%      140.750000\n",
       "max      549.000000\n",
       "Name: artist, dtype: float64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_m.artist.value_counts().describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(23222, 4)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_m.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We finally get 2644 artists to be identified. 40085 instances for training set and 11673 instances for test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "# use tf-idf to form the matrix\n",
    "vectorizer_t = TfidfVectorizer(max_features = 1000)\n",
    "X_t = vectorizer_t.fit_transform(corpus)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "corpus = train_m['wordBag'].values.astype(str).tolist()\n",
    "y = train_m['artist']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "try over sampling the minory class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Found input variables with inconsistent numbers of samples: [4334, 92885]",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-46-797876c5b681>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mX_resampled\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_resampled\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBorderlineSMOTE\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk_neighbors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_resample\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_t\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m~/miniconda3/lib/python3.6/site-packages/imblearn/base.py\u001b[0m in \u001b[0;36mfit_resample\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m     78\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_deprecate_ratio\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 80\u001b[0;31m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbinarize_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     81\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     82\u001b[0m         self.sampling_strategy_ = check_sampling_strategy(\n",
      "\u001b[0;32m~/miniconda3/lib/python3.6/site-packages/imblearn/base.py\u001b[0m in \u001b[0;36m_check_X_y\u001b[0;34m(X, y)\u001b[0m\n\u001b[1;32m    136\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_check_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    137\u001b[0m         \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbinarize_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_target_type\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindicate_one_vs_all\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 138\u001b[0;31m         \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_X_y\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'csr'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'csc'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    139\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbinarize_y\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    140\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/miniconda3/lib/python3.6/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, warn_on_dtype, estimator)\u001b[0m\n\u001b[1;32m    764\u001b[0m         \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat64\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    765\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 766\u001b[0;31m     \u001b[0mcheck_consistent_length\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    767\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    768\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/miniconda3/lib/python3.6/site-packages/sklearn/utils/validation.py\u001b[0m in \u001b[0;36mcheck_consistent_length\u001b[0;34m(*arrays)\u001b[0m\n\u001b[1;32m    233\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0muniques\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    234\u001b[0m         raise ValueError(\"Found input variables with inconsistent numbers of\"\n\u001b[0;32m--> 235\u001b[0;31m                          \" samples: %r\" % [int(l) for l in lengths])\n\u001b[0m\u001b[1;32m    236\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    237\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Found input variables with inconsistent numbers of samples: [4334, 92885]"
     ]
    }
   ],
   "source": [
    "X_resampled, y_resampled = BorderlineSMOTE(k_neighbors=5).fit_resample(X_t,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# count the words and form a matrix X as the input features\n",
    "vectorizer = CountVectorizer(max_features=5000)\n",
    "X = vectorizer.fit_transform(corpus)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# add SVD to our model\n",
    "svd = TruncatedSVD(n_components=200)\n",
    "X_d = svd.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# use SVM as our classifier\n",
    "clf = LinearSVC()\n",
    "clf.fit(X_d,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# predict the f1 score on the test set with the SVM model\n",
    "corpus_test = test_m['wordBag'].values.astype(str).tolist()\n",
    "X_test = vectorizer.fit_transform(corpus_test)\n",
    "X_test_d = svd.fit_transform(X_test)\n",
    "y_pred = clf.predict(X_test_d)\n",
    "y_true = test_m['artist']\n",
    "f1_score(y_true, y_pred, average = 'macro')  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## popularity model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "class popularityModel(object):\n",
    "    \"\"\"\n",
    "    basically is returning the Mode\n",
    "    \"\"\"\n",
    "    def __init__(self):\n",
    "        self.mode = None\n",
    "        return \n",
    "    \n",
    "    def fit(self, X, y):\n",
    "        \"\"\"\n",
    "        X: (number of examples k, number of features d.) nd array.\n",
    "        y: (number of examples, ) nd array, or panda.series.\n",
    "        \"\"\"\n",
    "        if X.shape[0] != y.shape[0]:\n",
    "            print(\"error, dim not match\")\n",
    "            return\n",
    "        self.mode = stats.mode(y.values, nan_policy='omit')[0][0]\n",
    "        \n",
    "    def predict(self, X):\n",
    "        \"\"\"\n",
    "        X: (number of examples k_1, number of features d.) nd array.\n",
    "        \"\"\"\n",
    "        if self.mode == None:\n",
    "            print(\"Please fit the model first.\")\n",
    "            return\n",
    "        \n",
    "        return np.array([self.mode] * X.shape[0])\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 3 µs, sys: 0 ns, total: 3 µs\n",
      "Wall time: 6.91 µs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/scipy/stats/stats.py:248: RuntimeWarning: The input array could not be properly checked for nan values. nan values will be ignored.\n",
      "  \"values. nan values will be ignored.\", RuntimeWarning)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1143: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1.8662757667242546e-05"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time\n",
    "corpus_test = test_m['wordBag'].values.astype(str).tolist()\n",
    "\n",
    "X_test = vectorizer.fit_transform(corpus_test)\n",
    "X_test_d = svd.fit_transform(X_test)\n",
    "\n",
    "popuralityMod = popularityModel()\n",
    "y_true = test_m['artist']\n",
    "\n",
    "popuralityMod.fit(X_d, y)\n",
    "\n",
    "y_pred = popuralityMod.predict(X_test_d)\n",
    "f1_score(y_true, y_pred, average = 'macro') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## try less artists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "artist_100 = data.artist.value_counts()[:100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_100 = data[data.artist.isin(artist_100.index)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# split the data into training and test dataset\n",
    "train, test = train_test_split(data_100, test_size=0.2, random_state = 124, stratify = data_100.artist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "corpus = train['wordBag'].values.astype(str).tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/scipy/stats/stats.py:248: RuntimeWarning: The input array could not be properly checked for nan values. nan values will be ignored.\n",
      "  \"values. nan values will be ignored.\", RuntimeWarning)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "X = vectorizer.fit_transform(corpus)\n",
    "X_d = svd.fit_transform(X)\n",
    "y = train.artist\n",
    "popuralityMod.fit(X_d, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1143: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.00044705136334812943"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corpus_test = test['wordBag'].values.astype(str).tolist()\n",
    "\n",
    "X_test = vectorizer.fit_transform(corpus_test)\n",
    "X_test_d = svd.fit_transform(X_test)\n",
    "y_pred = popuralityMod.predict(X_test_d)\n",
    "y_true = test['artist']\n",
    "\n",
    "f1_score(y_true, y_pred, average = 'macro') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With top 100 artists, our popularity model have f1 score = 0.000447"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### try top 10 artists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "artist_10 = data.artist.value_counts()[:10]\n",
    "data_10 = data[data.artist.isin(artist_10.index)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# split the data into training and test dataset\n",
    "train, test = train_test_split(data_10, test_size=0.2, random_state = 124, stratify = data_10.artist)\n",
    "corpus = train['wordBag'].values.astype(str).tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/scipy/stats/stats.py:248: RuntimeWarning: The input array could not be properly checked for nan values. nan values will be ignored.\n",
      "  \"values. nan values will be ignored.\", RuntimeWarning)\n"
     ]
    }
   ],
   "source": [
    "vectorizer = CountVectorizer(max_features=5000)\n",
    "svd = TruncatedSVD(n_components=200)\n",
    "popuralityMod = popularityModel()\n",
    "\n",
    "X = vectorizer.fit_transform(corpus)\n",
    "X_d = svd.fit_transform(X)\n",
    "y = train.artist\n",
    "popuralityMod.fit(X_d, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1143: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.023020408163265303"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corpus_test = test['wordBag'].values.astype(str).tolist()\n",
    "\n",
    "X_test = vectorizer.fit_transform(corpus_test)\n",
    "X_test_d = svd.fit_transform(X_test)\n",
    "y_pred = popuralityMod.predict(X_test_d)\n",
    "y_true = test['artist']\n",
    "\n",
    "f1_score(y_true, y_pred, average = 'macro') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## top 100 artists with SVM model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = LinearSVC()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:931: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1143: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.01163759813199625"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "clf.fit(X_d, y)\n",
    "y_pred = clf.predict(X_test_d)\n",
    "y_true = test['artist']\n",
    "\n",
    "f1_score(y_true, y_pred, average = 'macro') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### try top 10 artists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'X_d' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-16-86e1492d8b1d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_d\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0my_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test_d\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0my_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'artist'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mf1_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_pred\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maverage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'macro'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'X_d' is not defined"
     ]
    }
   ],
   "source": [
    "clf.fit(X_d, y)\n",
    "y_pred = clf.predict(X_test_d)\n",
    "y_true = test['artist']\n",
    "\n",
    "f1_score(y_true, y_pred, average = 'macro') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.21444512051309256"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vectorizer_t = TfidfVectorizer(max_features = 350, ngram_range = (1,1))\n",
    "X_t = vectorizer_t.fit_transform(corpus)\n",
    "X_test_t = vectorizer_t.fit_transform(corpus_test)\n",
    "clf.fit(X_t, y)\n",
    "y_pred = clf.predict(X_test_t)\n",
    "\n",
    "\n",
    "f1_score(y_true, y_pred, average = 'macro') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.18321698982562867"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# svm with svd\n",
    "svd = TruncatedSVD(n_components=300)\n",
    "X_t_d = svd.fit_transform(X_t)\n",
    "X_test_t_d = svd.fit_transform(X_test_t)\n",
    "clf.fit(X_t_d, y)\n",
    "y_pred = clf.predict(X_test_t_d)\n",
    "f1_score(y_true, y_pred, average = 'macro') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SVD is not effective"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## feature egineering"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### n-grams with SVM"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "grid search to find the optimal parameters for n-grams maximum features, ngram_range and # of components in SVD."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We conduct the grid search with maximum feaures 300,500,700,900,1200,1500,2000 and ngram_range (1,1),(1,2),(1,3),(1,4),(1,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 40 candidates, totalling 200 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  42 tasks      | elapsed:  1.5min\n",
      "[Parallel(n_jobs=-1)]: Done 192 tasks      | elapsed:  7.6min\n",
      "[Parallel(n_jobs=-1)]: Done 200 out of 200 | elapsed:  8.2min finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise-deprecating',\n",
       "       estimator=Pipeline(memory=None,\n",
       "     steps=[('tfidf', TfidfVectorizer(analyzer='word', binary=False, decode_error='strict',\n",
       "        dtype=<class 'numpy.float64'>, encoding='utf-8', input='content',\n",
       "        lowercase=True, max_df=1.0, max_features=None, min_df=1,\n",
       "        ngram_range=(1, 1), norm='l2', preprocessor=None, smooth_idf=True,...ax_iter=1000,\n",
       "     multi_class='ovr', penalty='l2', random_state=None, tol=0.0001,\n",
       "     verbose=0))]),\n",
       "       fit_params=None, iid='warn', n_jobs=-1,\n",
       "       param_grid={'tfidf__max_features': [300, 500, 700, 900, 1200, 1500, 2000, 3000], 'tfidf__ngram_range': [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)]},\n",
       "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
       "       scoring=None, verbose=True)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipeline = Pipeline([\n",
    "    ('tfidf', TfidfVectorizer()),\n",
    "    ('model', LinearSVC())\n",
    "])\n",
    "parameters = {'tfidf__max_features':[300,500,700,900,1200,1500,2000,3000], 'tfidf__ngram_range':[(1,1),(1,2),(1,3),(1,4),(1,5)]}\n",
    "\n",
    "clf_grid = GridSearchCV(pipeline, parameters, cv=5, n_jobs=-1, verbose=True)\n",
    "clf_grid.fit(corpus,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('split0_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('split1_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('split2_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('split3_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('split4_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('mean_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('std_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n"
     ]
    }
   ],
   "source": [
    "results = pd.melt(\n",
    "pd.DataFrame(clf_grid.cv_results_),\n",
    "id_vars=['param_tfidf__max_features', 'param_tfidf__ngram_range'],\n",
    "value_vars=[\n",
    "'mean_test_score'\n",
    "],\n",
    "value_name='f1_scores'\n",
    ")\n",
    "\n",
    "results = results.drop(['variable'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_results(results, title,xlable,ylable, huelable):\n",
    "    f, ax = plt.subplots(figsize=(8, 5))\n",
    "    sns.lineplot(ax=ax,\n",
    "    x= xlable,\n",
    "    y= ylable,\n",
    "    hue = huelable,\n",
    "    data=results)\n",
    "    ax.set_xlabel(xlable)\n",
    "    ax.set_ylabel('mean of prediction accuracy')\n",
    "    ax.set_title(title)\n",
    "    ax.legend(loc='lower right')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "plot_results(results,'grid search for max_feaetures and ngram_range', 'param_tfidf__max_features','f1_scores','param_tfidf__ngram_range')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the grid search, we find that the performance of models with unigram and bigram reach a plateau after the number fo maximum features exceed 1500 and then increasing again. While, ngram range larger than (1,2) seems to keep reach the plateau after number of maximum features exceeds 2000."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'tfidf__max_features': 3000, 'tfidf__ngram_range': (1, 1)}"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_grid.best_params_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### other features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [],
   "source": [
    "class uniqueWordRatioVec(object):\n",
    "    '''\n",
    "    convet bag of words(seperate by ' ') aka the \"wordBag\" column.\n",
    "    to \n",
    "    [number of unique words/length of the lyrics] vec\n",
    "    '''\n",
    "    \n",
    "    def __init__(self):\n",
    "        '''\n",
    "        self.dim: number of length of X, which is number lyrics.\n",
    "        '''\n",
    "        self.dim = 0\n",
    "        self.vec = []\n",
    "        return None\n",
    "    \n",
    "    def fitTransForm(self, X):\n",
    "        \"\"\"\n",
    "        length self.dim, but contains [k_0, k_1, .. ,k_n] for k_i in range(0, 1)\n",
    "        X is the \"wordBag\" column.\n",
    "        \"\"\"\n",
    "        for wordbag in X:\n",
    "            wordsList = wordbag.split(' ')\n",
    "            self.vec.append(len(set(wordsList)) / len(wordsList))\n",
    "        self.lengths = len(X)\n",
    "        return np.array(self.vec)\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(92885,)\n"
     ]
    }
   ],
   "source": [
    "uniqueWordvecX = uniqueWordRatioVec().fitTransForm(corpus)\n",
    "\n",
    "print(uniqueWordvecX.shape)\n",
    "del uniqueWordvecX"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "class styleVector(object):\n",
    "    \"\"\"\n",
    "    feature type: style:\n",
    "    (1)   POS (map to super tag V N ADV)\n",
    "    (2)   Length per line\n",
    "    (3)   *Repetition:\n",
    "    letter level: # of repeated letter >3\n",
    "    word level: count 1 word and 2 words repetition as one feature\n",
    "    \"\"\"\n",
    "    def __init__(self):\n",
    "        self.dim = 0\n",
    "        self.vec = []\n",
    "        self.posTags = ['LS', 'TO', 'VBN', \"''\", 'WP', 'UH', 'VBG', 'JJ', 'VBZ', \\\n",
    "                        '--', 'VBP', 'NN', 'DT', 'PRP', ':', 'WP$', 'NNPS', 'PRP$', 'WDT', '(', ')', '.', ',', '``', '$',\\\n",
    "                        'RB', 'RBR', 'RBS', 'VBD', 'IN', 'FW', 'RP', 'JJR', 'JJS', 'PDT', 'MD', 'VB', 'WRB', 'NNP', 'EX', \\\n",
    "                        'NNS', 'SYM', 'CC', 'CD', 'POS']\n",
    "        return\n",
    "    \n",
    "    def fitTransForm(self, X):\n",
    "        \"\"\"\n",
    "        X is the \"lyrics\" column.\n",
    "        \"\"\"\n",
    "        ct = 0\n",
    "        for lyc in X:\n",
    "            wordBaglyc = nltk.word_tokenize(lyc)\n",
    "            \n",
    "            \n",
    "            posTag = self.generatePosTag(lyc, wordBaglyc)\n",
    "            lengthPerLine = self.generateLenPerLine(lyc, wordBaglyc)\n",
    "            repInfo = self.generateRepeatInfo(lyc, wordBaglyc)\n",
    "            \n",
    "            \n",
    "            vec = posTag + [lengthPerLine] + repInfo\n",
    "            \n",
    "            ct += 1\n",
    "            if ct % 100 == 0:\n",
    "                print(ct, len(X))\n",
    "                \n",
    "            self.vec.append(vec)\n",
    "        return np.array(self.vec)\n",
    "            \n",
    "    \n",
    "    def generatePosTag(self, lyric, wordbaglyric):\n",
    "        \"\"\"\n",
    "        lyric: an item of lyric.\n",
    "        rtype: [count for each type], size is 45.\n",
    "        wordbaglyric: str, word_tokenize version of lyric.\n",
    "        \"\"\"\n",
    "        tagCount = Counter(x[1] for x in nltk.pos_tag(wordbaglyric))\n",
    "        vec = [0] * 45\n",
    "        for idx, tag in enumerate(self.posTags):\n",
    "            if tag in tagCount.keys():\n",
    "                vec[idx] = tagCount[tag]\n",
    "        return vec\n",
    "    \n",
    "    def generateLenPerLine(self, lyric, wordbaglyric):\n",
    "        \"\"\"\n",
    "        lyric: an item of lyric.\n",
    "        rtype: double, (number of word)/(number of \\n)\n",
    "        wordbaglyric: str, word_tokenize version of lyric.\n",
    "        \"\"\"\n",
    "        #wordCount = len(nltk.word_tokenize(lyric))\n",
    "        wordCount = len(wordbaglyric)\n",
    "        LineCount = Counter(lyric)['\\n']\n",
    "        if LineCount == 0:\n",
    "            return wordCount\n",
    "        return wordCount/LineCount\n",
    "    \n",
    "    def generateRepeatInfo(self, lyric, wordbaglyric):\n",
    "        \"\"\"\n",
    "        lyric: an item of lyric.\n",
    "        rtype: [count of reapeat letter > 3, count of repeat word, count of repeat 2-gram], size is 45.\n",
    "        wordbaglyric: str, word_tokenize version of lyric.\n",
    "        \"\"\"\n",
    "        ctRepeatChar = 0\n",
    "        chQue = deque(maxlen = 3)\n",
    "        for ch in lyric:\n",
    "            chQue.append(ch.lower())\n",
    "            if len(chQue) == 3:\n",
    "                if chQue[0] == chQue[1] and chQue[1] == chQue[2]:\n",
    "                    ctRepeatChar += 1\n",
    "        \n",
    "        words = wordbaglyric\n",
    "        \n",
    "        wordQueue = deque(maxlen = 2)\n",
    "        twoGramQueue = deque(maxlen = 4)\n",
    "        \n",
    "        ctRepeatWord = 0\n",
    "        ctRepeatTwoGram = 0\n",
    "        \n",
    "        for w in words:\n",
    "            wordQueue.append(w.lower())\n",
    "            twoGramQueue.append(w.lower())\n",
    "            if len(wordQueue) == 2:\n",
    "                if wordQueue[0] == wordQueue[1]:\n",
    "                    ctRepeatWord += 1\n",
    "            if len(twoGramQueue) == 4:\n",
    "                if twoGramQueue[0] == twoGramQueue[2] and twoGramQueue[1] == twoGramQueue[3]:\n",
    "                    ctRepeatTwoGram += 1\n",
    "        \n",
    "        return [ctRepeatChar, ctRepeatWord, ctRepeatTwoGram]\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "Xtest = test_m['lyrics'].values.astype(str).tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100 200\n",
      "200 200\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([ 0.        ,  1.        ,  6.        ,  0.        ,  0.        ,\n",
       "        2.        ,  5.        ,  5.        ,  8.        ,  0.        ,\n",
       "       44.        , 29.        , 19.        , 64.        ,  0.        ,\n",
       "        0.        ,  0.        ,  3.        ,  0.        ,  0.        ,\n",
       "        0.        ,  1.        , 17.        ,  0.        ,  0.        ,\n",
       "       10.        ,  0.        ,  0.        ,  0.        , 22.        ,\n",
       "        0.        ,  0.        ,  2.        ,  0.        ,  4.        ,\n",
       "        1.        ,  8.        ,  3.        ,  6.        ,  2.        ,\n",
       "        6.        ,  0.        , 11.        ,  0.        ,  0.        ,\n",
       "        9.96428571,  0.        ,  0.        ,  4.        ])"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp = styleVector().fitTransForm(Xtest[:200])\n",
    "temp[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.        ,  1.        ,  6.        ,  0.        ,  0.        ,\n",
       "         2.        ,  5.        ,  5.        ,  8.        ,  0.        ,\n",
       "        44.        , 29.        , 19.        , 64.        ,  0.        ,\n",
       "         0.        ,  0.        ,  3.        ,  0.        ,  0.        ,\n",
       "         0.        ,  1.        , 17.        ,  0.        ,  0.        ,\n",
       "        10.        ,  0.        ,  0.        ,  0.        , 22.        ,\n",
       "         0.        ,  0.        ,  2.        ,  0.        ,  4.        ,\n",
       "         1.        ,  8.        ,  3.        ,  6.        ,  2.        ,\n",
       "         6.        ,  0.        , 11.        ,  0.        ,  0.        ,\n",
       "         9.96428571,  0.        ,  0.        ,  4.        ],\n",
       "       [ 0.        ,  2.        ,  2.        ,  0.        ,  3.        ,\n",
       "         1.        ,  0.        , 57.        ,  8.        ,  0.        ,\n",
       "        16.        , 41.        , 15.        , 41.        ,  0.        ,\n",
       "         0.        ,  0.        ,  4.        ,  0.        ,  0.        ,\n",
       "         0.        , 71.        , 26.        ,  0.        ,  0.        ,\n",
       "         2.        ,  0.        ,  0.        ,  7.        , 16.        ,\n",
       "         0.        ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
       "         0.        , 11.        ,  0.        , 23.        ,  1.        ,\n",
       "         3.        ,  0.        ,  2.        ,  0.        ,  5.        ,\n",
       "         7.76086957,  6.        ,  0.        , 33.        ]])"
      ]
     },
     "execution_count": 180,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp[:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [],
   "source": [
    "class orientatedVec(object):\n",
    "    \n",
    "    def __init__(self):\n",
    "        \"\"\"\n",
    "        initial vector.\n",
    "        \"\"\"\n",
    "        self.vec = []\n",
    "        self.dim = None\n",
    "        return None\n",
    "    \n",
    "    def fitTransform(self, X):\n",
    "        \"\"\"\n",
    "        input: X is the 'wordbag' column. (k, ) dimension\n",
    "        output: (k, 3) vec.\n",
    "        \"\"\"\n",
    "        for lyric in X:\n",
    "            lyricwBag = lyric.split(' ')\n",
    "            pastR = self.generatePastVerbRatio(lyricwBag)\n",
    "            selfRefVec = self.generateSelfRefToOthersandToSecond(lyricwBag)\n",
    "            self.vec.append([pastR] + selfRefVec)\n",
    "        self.dim = len(X)\n",
    "        self.vec = np.array(self.vec)\n",
    "        return self.vec\n",
    "        \n",
    "    def generatePastVerbRatio(self, lyricWordBag):\n",
    "        \"\"\"\n",
    "        Past tense ratio: the fraction of past tense verb forms to all verb forms as a feature\n",
    "        input: list of str, list of words in lyric.\n",
    "        rtype: float, ratio, from 0 to 1.\n",
    "        \"\"\"\n",
    "        pTags = nltk.pos_tag(lyricWordBag)\n",
    "        verbCount = Counter(x[1][0] for x in pTags)['V']\n",
    "        pastCount = Counter(x[1] for x in pTags)['VBN']\n",
    "        if verbCount == 0:\n",
    "            return 0\n",
    "        return pastCount/verbCount\n",
    "    \n",
    "    def generateSelfRefToOthersandToSecond(self, lyricWordBag):\n",
    "        \"\"\"\n",
    "        Self-reference ratio: # of the first person singular and plural/ 2 and 3 person\n",
    "        input: list of str, word bag of lyric\n",
    "        rtype: [float, float] ratio, range vaires. [one / other, one / second]\n",
    "        \"\"\"\n",
    "        firstPersonSingular = set(['i', 'me', 'my'])\n",
    "        secondPersonSingular = set(['you', 'your'])\n",
    "        thirdPersonSingular = set(['it', 'its', 'he', 'his', 'him', 'she', 'her'])\n",
    "        \n",
    "        firstPersonCount = 0\n",
    "        secondPersonCount = 0\n",
    "        thirdPersonCount = 0\n",
    "        \n",
    "        for word in lyricWordBag:\n",
    "            if word in firstPersonSingular:\n",
    "                firstPersonCount += 1\n",
    "            if word in secondPersonSingular:\n",
    "                secondPersonCount += 1\n",
    "            if word in thirdPersonSingular:\n",
    "                thirdPersonCount += 1\n",
    "        \n",
    "        if secondPersonCount + thirdPersonCount == 0:\n",
    "            return [0, 0]\n",
    "            #if the sum is zero, all of the counts are zeros.\n",
    "        if secondPersonCount == 0 and thirdPersonCount != 0:\n",
    "            return [firstPersonCount/thirdPersonCount, 0]\n",
    "        if thirdPersonCount == 0 and secondPersonCount != 0:\n",
    "            return [0, firstPersonCount/secondPersonCount]\n",
    "        return [firstPersonCount/(secondPersonCount + thirdPersonCount), firstPersonCount/(secondPersonCount)]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.05063291,  2.8       ,  9.33333333],\n",
       "       [ 0.05063291,  6.69230769, 21.75      ]])"
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp = corpus[:2]\n",
    "wbag = temp[0].split(' ')\n",
    "\n",
    "orientatedVec().fitTransform(temp)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "snoop\n",
      "doggy\n",
      "dogg\n",
      "dre\n",
      "door\n",
      "ready\n",
      "make\n",
      "entrance\n",
      "back\n",
      "cause\n",
      "know\n",
      "rip\n",
      "shit\n",
      "give\n",
      "microphone\n",
      "first\n",
      "i\n",
      "bust\n",
      "like\n",
      "bubble\n",
      "compton\n",
      "long\n",
      "beach\n",
      "together\n",
      "know\n",
      "trouble\n",
      "ai\n",
      "nothing\n",
      "g\n",
      "thang\n",
      "baby\n",
      "two\n",
      "niggas\n",
      "crazy\n",
      "death\n",
      "row\n",
      "label\n",
      "pays\n",
      "unfadeable\n",
      "please\n",
      "try\n",
      "fade\n",
      "but\n",
      "um\n",
      "back\n",
      "lecture\n",
      "hand\n",
      "perfection\n",
      "perfected\n",
      "let\n",
      "em\n",
      "understand\n",
      "from\n",
      "young\n",
      "g\n",
      "perspective\n",
      "and\n",
      "dig\n",
      "bitch\n",
      "i\n",
      "find\n",
      "contraceptive\n",
      "you\n",
      "never\n",
      "know\n",
      "could\n",
      "earning\n",
      "man\n",
      "and\n",
      "learning\n",
      "man\n",
      "time\n",
      "burning\n",
      "man\n",
      "now\n",
      "know\n",
      "i\n",
      "ai\n",
      "shit\n",
      "lieutenant\n",
      "ai\n",
      "pussy\n",
      "good\n",
      "enough\n",
      "get\n",
      "burnt\n",
      "i\n",
      "yeah\n",
      "realer\n",
      "holyfield\n",
      "and\n",
      "hookers\n",
      "hoes\n",
      "know\n",
      "i\n",
      "feel\n",
      "well\n",
      "good\n",
      "enough\n",
      "get\n",
      "broke\n",
      "proper\n",
      "chunk\n",
      "i\n",
      "take\n",
      "small\n",
      "piece\n",
      "funky\n",
      "stuff\n",
      "it\n",
      "like\n",
      "like\n",
      "like\n",
      "uh\n",
      "it\n",
      "like\n",
      "like\n",
      "like\n",
      "uh\n",
      "it\n",
      "like\n",
      "like\n",
      "like\n",
      "uh\n",
      "dre\n",
      "creep\n",
      "mic\n",
      "like\n",
      "phantom\n",
      "well\n",
      "i\n",
      "peeping\n",
      "i\n",
      "creeping\n",
      "i\n",
      "but\n",
      "i\n",
      "damn\n",
      "near\n",
      "got\n",
      "caught\n",
      "cause\n",
      "beeper\n",
      "kept\n",
      "beepin\n",
      "now\n",
      "time\n",
      "make\n",
      "impression\n",
      "felt\n",
      "so\n",
      "sit\n",
      "back\n",
      "relax\n",
      "strap\n",
      "seat\n",
      "belt\n",
      "you\n",
      "never\n",
      "ride\n",
      "like\n",
      "with\n",
      "producer\n",
      "rap\n",
      "control\n",
      "maestro\n",
      "at\n",
      "time\n",
      "dope\n",
      "rhyme\n",
      "i\n",
      "kick\n",
      "you\n",
      "know\n",
      "i\n",
      "know\n",
      "i\n",
      "flow\n",
      "old\n",
      "funky\n",
      "shit\n",
      "to\n",
      "add\n",
      "collection\n",
      "selection\n",
      "symbolizes\n",
      "dope\n",
      "take\n",
      "toke\n",
      "choke\n",
      "if\n",
      "clue\n",
      "on\n",
      "homey\n",
      "snoop\n",
      "dogg\n",
      "came\n",
      "it\n",
      "like\n",
      "like\n",
      "like\n",
      "uh\n",
      "it\n",
      "like\n",
      "like\n",
      "like\n",
      "uh\n",
      "it\n",
      "like\n",
      "like\n",
      "like\n",
      "uh\n",
      "and\n",
      "gives\n",
      "fuck\n",
      "so\n",
      "chill\n",
      "til\n",
      "next\n",
      "episode\n",
      "falling\n",
      "back\n",
      "ass\n",
      "hellafied\n",
      "gangsta\n",
      "lean\n",
      "getting\n",
      "funky\n",
      "mic\n",
      "like\n",
      "old\n",
      "batch\n",
      "collard\n",
      "greens\n",
      "it\n",
      "capital\n",
      "s\n",
      "oh\n",
      "yes\n",
      "i\n",
      "fresh\n",
      "n\n",
      "p\n",
      "d\n",
      "o\n",
      "y\n",
      "d\n",
      "o\n",
      "ya\n",
      "see\n",
      "showing\n",
      "much\n",
      "flex\n",
      "time\n",
      "wreck\n",
      "mic\n",
      "pimping\n",
      "hoes\n",
      "clocking\n",
      "grip\n",
      "like\n",
      "name\n",
      "dolomite\n",
      "yeah\n",
      "quit\n",
      "i\n",
      "think\n",
      "mood\n",
      "motherfuckin\n",
      "g\n",
      "shit\n",
      "hell\n",
      "yeah\n",
      "so\n",
      "dre\n",
      "whattup\n",
      "dogg\n",
      "got\n",
      "ta\n",
      "give\n",
      "want\n",
      "what\n",
      "g\n",
      "we\n",
      "got\n",
      "ta\n",
      "break\n",
      "em\n",
      "something\n",
      "hell\n",
      "yeah\n",
      "and\n",
      "got\n",
      "ta\n",
      "bumpin\n",
      "city\n",
      "compton\n",
      "is\n",
      "takes\n",
      "place\n",
      "asked\n",
      "attention\n",
      "mobbing\n",
      "like\n",
      "motherfucker\n",
      "i\n",
      "ai\n",
      "lynchin\n",
      "dropping\n",
      "funky\n",
      "shit\n",
      "making\n",
      "sucker\n",
      "niggas\n",
      "mumble\n",
      "when\n",
      "i\n",
      "mic\n",
      "like\n",
      "cookie\n",
      "crumble\n",
      "try\n",
      "get\n",
      "close\n",
      "ass\n",
      "get\n",
      "smacked\n",
      "my\n",
      "motherfucking\n",
      "homie\n",
      "doggy\n",
      "dogg\n",
      "got\n",
      "back\n",
      "never\n",
      "let\n",
      "slip\n",
      "cause\n",
      "i\n",
      "slip\n",
      "i\n",
      "slippin\n",
      "but\n",
      "i\n",
      "got\n",
      "nina\n",
      "know\n",
      "i\n",
      "straight\n",
      "trippin\n",
      "and\n",
      "continue\n",
      "put\n",
      "rap\n",
      "put\n",
      "mack\n",
      "and\n",
      "bitches\n",
      "talk\n",
      "shit\n",
      "i\n",
      "put\n",
      "smack\n",
      "yeah\n",
      "stop\n",
      "i\n",
      "told\n",
      "i\n",
      "like\n",
      "clock\n",
      "i\n",
      "tick\n",
      "i\n",
      "tock\n",
      "but\n",
      "i\n",
      "never\n",
      "always\n",
      "break\n",
      "dawn\n",
      "city\n",
      "call\n",
      "long\n",
      "beach\n",
      "putting\n",
      "shit\n",
      "together\n",
      "like\n",
      "nigga\n",
      "no\n",
      "one\n",
      "can\n",
      "do\n",
      "better\n"
     ]
    }
   ],
   "source": [
    "for w in wbag:\n",
    "    print(w)"
=======
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "class negPosThirdPerson(object):\n",
    "    \"\"\"\n",
    "    build a feature with:\n",
    "    [\n",
    "    [# of positive third person purals] / [# of positive third person purals] + [# of negative third person purals],\n",
    "    [# of positive third person purals] / [# of positive third person purals] + [# of negative third person purals]\n",
    "    ],\n",
    "    sum of the vector should be one, if [# of positive third person purals] + [# of negative third person purals] == 0,\n",
    "    will set the vector to [0.5, 0.5]\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self):\n",
    "        \"\"\"\n",
    "        self.dim : number of lyrics, (k, 1) the k.\n",
    "        self.vec : the vec [(0.5, 0.5), (0.2, 0.8) ,..., (...)]\n",
    "        \"\"\"\n",
    "        self.dim = None\n",
    "        self.vec = []\n",
    "    \n",
    "    def transform(self, bagsOfWords):\n",
    "        \"\"\"\n",
    "        input: bagsOfWords column\n",
    "        output: np.array of feature vector.\n",
    "        \"\"\"\n",
    "        postivePrunals = set(['he', 'him', 'his'])\n",
    "        negtivePrunals = set(['she', 'her'])\n",
    "        \n",
    "        \n",
    "        for bag in bagsOfWords:\n",
    "            \"\"\"\n",
    "            vec: [(positive ratio, negetive ratio)]\n",
    "            \"\"\"\n",
    "            vec = []\n",
    "            \n",
    "            posCount = 0\n",
    "            negCount = 0\n",
    "            \n",
    "            wordList = bag.split(' ')\n",
    "            for word in wordList:\n",
    "                \n",
    "                if word in postivePrunals:\n",
    "                    posCount += 1\n",
    "                if word in negtivePrunals:\n",
    "                    negCount += 1\n",
    "#             if posCount != 0 and negCount != 0:\n",
    "#                 print(negCount, posCount)\n",
    "            if posCount + negCount == 0:\n",
    "                self.vec.append([0.5, 0.5])\n",
    "            else:\n",
    "                self.vec.append([posCount/(posCount + negCount), negCount/(posCount + negCount)])\n",
    "        self.vec = np.array(self.vec)\n",
    "        return self.vec\n",
    "                "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.5       , 0.5       ],\n",
       "       [1.        , 0.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.        , 1.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.        , 1.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.        , 1.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [1.        , 0.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [1.        , 0.        ],\n",
       "       [1.        , 0.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [1.        , 0.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.        , 1.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.        , 1.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [1.        , 0.        ],\n",
       "       [0.        , 1.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.        , 1.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [1.        , 0.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [1.        , 0.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [1.        , 0.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.        , 1.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.        , 1.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.33333333, 0.66666667],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [1.        , 0.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [1.        , 0.        ],\n",
       "       [1.        , 0.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.75      , 0.25      ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [1.        , 0.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.        , 1.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [1.        , 0.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.        , 1.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.        , 1.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.        , 1.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.07692308, 0.92307692],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.        , 1.        ],\n",
       "       [1.        , 0.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.        , 1.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [1.        , 0.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.        , 1.        ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.5       , 0.5       ],\n",
       "       [0.        , 1.        ],\n",
       "       [0.5       , 0.5       ]])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp = corpus[:200]\n",
    "\n",
    "test = negPosThirdPerson()\n",
    "test.transform(temp)"
>>>>>>> 05fd014
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## other models"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### other SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 15 candidates, totalling 75 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  42 tasks      | elapsed:  6.2min\n",
      "[Parallel(n_jobs=-1)]: Done  75 out of  75 | elapsed: 10.3min finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise-deprecating',\n",
       "       estimator=Pipeline(memory=None,\n",
       "     steps=[('tfidf', TfidfVectorizer(analyzer='word', binary=False, decode_error='strict',\n",
       "        dtype=<class 'numpy.float64'>, encoding='utf-8', input='content',\n",
       "        lowercase=True, max_df=1.0, max_features=3000, min_df=1,\n",
       "        ngram_range=(1, 1), norm='l2', preprocessor=None, smooth_idf=True,...,\n",
       "  max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
       "  tol=0.001, verbose=False))]),\n",
       "       fit_params=None, iid='warn', n_jobs=-1,\n",
       "       param_grid={'model__kernel': ('linear', 'rbf', 'poly'), 'model__C': [0.1, 1, 10, 20, 50]},\n",
       "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
       "       scoring=None, verbose=True)"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipeline_c = Pipeline([\n",
    "    ('tfidf', TfidfVectorizer(max_features = 3000, ngram_range = (1,1))),\n",
    "    ('model', svm.SVC(gamma=\"scale\"))\n",
    "])\n",
    "parameters_svc = {'model__kernel':('linear', 'rbf','poly'), 'model__C':[0.1,1, 10,20,50]}\n",
    "\n",
    "clf_gs = GridSearchCV(pipeline_c, parameters_svc, cv=5, n_jobs=-1, verbose=True)\n",
    "clf_gs.fit(corpus,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('split0_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('split1_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('split2_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('split3_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('split4_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('mean_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('std_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n"
     ]
    }
   ],
   "source": [
    "results_m = pd.melt(\n",
    "pd.DataFrame(clf_gs.cv_results_),\n",
    "id_vars=['param_model__kernel', 'param_model__C'],\n",
    "value_vars=[\n",
    "'mean_test_score'\n",
    "],\n",
    "value_name='f1_scores'\n",
    ")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_results(results_m,'grid search for kernels and penalty', 'param_model__C','f1_scores','param_model__kernel')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'model__C': 20, 'model__kernel': 'rbf'}"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_gs.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>param_model__kernel</th>\n",
       "      <th>param_model__C</th>\n",
       "      <th>variable</th>\n",
       "      <th>f1_scores</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>linear</td>\n",
       "      <td>0.1</td>\n",
       "      <td>mean_test_score</td>\n",
       "      <td>0.254499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>rbf</td>\n",
       "      <td>0.1</td>\n",
       "      <td>mean_test_score</td>\n",
       "      <td>0.129672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>poly</td>\n",
       "      <td>0.1</td>\n",
       "      <td>mean_test_score</td>\n",
       "      <td>0.129672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>linear</td>\n",
       "      <td>1</td>\n",
       "      <td>mean_test_score</td>\n",
       "      <td>0.494462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>rbf</td>\n",
       "      <td>1</td>\n",
       "      <td>mean_test_score</td>\n",
       "      <td>0.142824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>poly</td>\n",
       "      <td>1</td>\n",
       "      <td>mean_test_score</td>\n",
       "      <td>0.129672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>linear</td>\n",
       "      <td>10</td>\n",
       "      <td>mean_test_score</td>\n",
       "      <td>0.456622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>rbf</td>\n",
       "      <td>10</td>\n",
       "      <td>mean_test_score</td>\n",
       "      <td>0.452238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>poly</td>\n",
       "      <td>10</td>\n",
       "      <td>mean_test_score</td>\n",
       "      <td>0.129672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>linear</td>\n",
       "      <td>20</td>\n",
       "      <td>mean_test_score</td>\n",
       "      <td>0.455468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>rbf</td>\n",
       "      <td>20</td>\n",
       "      <td>mean_test_score</td>\n",
       "      <td>0.494693</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>poly</td>\n",
       "      <td>20</td>\n",
       "      <td>mean_test_score</td>\n",
       "      <td>0.129672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>linear</td>\n",
       "      <td>50</td>\n",
       "      <td>mean_test_score</td>\n",
       "      <td>0.451084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>rbf</td>\n",
       "      <td>50</td>\n",
       "      <td>mean_test_score</td>\n",
       "      <td>0.476927</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>poly</td>\n",
       "      <td>50</td>\n",
       "      <td>mean_test_score</td>\n",
       "      <td>0.129672</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   param_model__kernel param_model__C         variable  f1_scores\n",
       "0               linear            0.1  mean_test_score   0.254499\n",
       "1                  rbf            0.1  mean_test_score   0.129672\n",
       "2                 poly            0.1  mean_test_score   0.129672\n",
       "3               linear              1  mean_test_score   0.494462\n",
       "4                  rbf              1  mean_test_score   0.142824\n",
       "5                 poly              1  mean_test_score   0.129672\n",
       "6               linear             10  mean_test_score   0.456622\n",
       "7                  rbf             10  mean_test_score   0.452238\n",
       "8                 poly             10  mean_test_score   0.129672\n",
       "9               linear             20  mean_test_score   0.455468\n",
       "10                 rbf             20  mean_test_score   0.494693\n",
       "11                poly             20  mean_test_score   0.129672\n",
       "12              linear             50  mean_test_score   0.451084\n",
       "13                 rbf             50  mean_test_score   0.476927\n",
       "14                poly             50  mean_test_score   0.129672"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results_m"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Linear and rbf kernel are both effective, as the penalty increasing, they two both tend to be constant. The best combination is rbf kernal and penalty equals to 20. While the score for linear SVC with small penalty is also close to the best combination. Take model complexity and training speed into consider, we could also use linear SVC with penalty equals to 1."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### random forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "vectorizer_t = TfidfVectorizer(max_features = 350, ngram_range = (1,1))\n",
    "X_t = vectorizer_t.fit_transform(corpus)\n",
    "X_test_t= vectorizer_t.fit_transform(corpus_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.21444512051309256"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_r = RandomForestClassifier(n_estimators = 100, max_depth = 10)\n",
    "clf_r.fit(X_t, y)\n",
    "y_pred = clf.predict(X_test_t)\n",
    "\n",
    "f1_score(y_true, y_pred, average = 'macro') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It seems that for random forest the best maximum features is not same as SVM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 9 candidates, totalling 45 fits\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.\n",
      "[Parallel(n_jobs=-1)]: Done  45 out of  45 | elapsed:  4.2min finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, error_score='raise-deprecating',\n",
       "       estimator=Pipeline(memory=None,\n",
       "     steps=[('tfidf', TfidfVectorizer(analyzer='word', binary=False, decode_error='strict',\n",
       "        dtype=<class 'numpy.float64'>, encoding='utf-8', input='content',\n",
       "        lowercase=True, max_df=1.0, max_features=300, min_df=1,\n",
       "        ngram_range=(1, 1), norm='l2', preprocessor=None, smooth_idf=True,\n",
       "...obs=None,\n",
       "            oob_score=False, random_state=None, verbose=0,\n",
       "            warm_start=False))]),\n",
       "       fit_params=None, iid='warn', n_jobs=-1,\n",
       "       param_grid={'model__n_estimators': [10, 100, 1000], 'model__max_depth': [10, 100, 1000]},\n",
       "       pre_dispatch='2*n_jobs', refit=True, return_train_score='warn',\n",
       "       scoring=None, verbose=True)"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipeline_rf = Pipeline([\n",
    "    ('tfidf', TfidfVectorizer(max_features = 300, ngram_range = (1,1))),\n",
    "    ('model', RandomForestClassifier())\n",
    "])\n",
    "parameters_rf = {'model__n_estimators':[10,100,1000], 'model__max_depth':[10,100,1000]}\n",
    "\n",
    "clf_rf = GridSearchCV(pipeline_rf, parameters_rf, cv=5, n_jobs=-1, verbose=True)\n",
    "clf_rf.fit(corpus,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('split0_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('split1_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('split2_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('split3_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('split4_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('mean_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/utils/deprecation.py:125: FutureWarning: You are accessing a training score ('std_train_score'), which will not be available by default any more in 0.21. If you need training scores, please set return_train_score=True\n",
      "  warnings.warn(*warn_args, **warn_kwargs)\n"
     ]
    }
   ],
   "source": [
    "results_rf = pd.melt(\n",
    "pd.DataFrame(clf_rf.cv_results_),\n",
    "id_vars=['param_model__n_estimators', 'param_model__max_depth'],\n",
    "value_vars=[\n",
    "'mean_test_score'\n",
    "],\n",
    "value_name='f1_scores'\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [],
   "source": [
    "results_rf.param_model__max_depth = pd.to_numeric(results_rf.param_model__max_depth)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a31aa9c50>"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.set(style=\"whitegrid\")\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(8, 6))\n",
    "\n",
    "sns.lineplot(\n",
    "    x='param_model__n_estimators',\n",
    "    y='f1_scores',\n",
    "    hue='param_model__max_depth',\n",
    "    data=results_rf,\n",
    "    legend=\"full\",\n",
    "    ax=ax\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'model__max_depth': 100, 'model__n_estimators': 1000}"
      ]
     },
     "execution_count": 159,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_rf.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4610059990770651"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf_rf.best_score_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The best combination is 100 maximum depth with 1000 trees."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The best of all models we have tried is SVC with rbf and penalty 20, tfidf max features 3000 and unigram."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
