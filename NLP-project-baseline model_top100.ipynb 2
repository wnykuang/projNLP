{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "import nltk\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.svm import SVC, LinearSVC\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.decomposition import TruncatedSVD\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from imblearn.over_sampling import BorderlineSMOTE\n",
    "\n",
    "from scipy import stats\n",
    "\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "combined = pd.read_csv('./cleanAndGenerateWordBag_v0.2/wordBag.csv', sep = '\\t')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "drop the duplicates based on lyrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(419887, 4)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combined.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "302368"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(combined.lyrics.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = combined.drop_duplicates(['lyrics'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(302368, 4)"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>song</th>\n",
       "      <th>lyrics</th>\n",
       "      <th>artist</th>\n",
       "      <th>wordBag</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ego-remix</td>\n",
       "      <td>Oh baby, how you doing?\\nYou know I'm gonna cu...</td>\n",
       "      <td>beyonce-knowles</td>\n",
       "      <td>oh baby you know i gon na cut right chase some...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>then-tell-me</td>\n",
       "      <td>playin' everything so easy,\\nit's like you see...</td>\n",
       "      <td>beyonce-knowles</td>\n",
       "      <td>playin everything easy like seem sure still wa...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>honesty</td>\n",
       "      <td>If you search\\nFor tenderness\\nIt isn't hard t...</td>\n",
       "      <td>beyonce-knowles</td>\n",
       "      <td>if search for tenderness it hard find you love...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>you-are-my-rock</td>\n",
       "      <td>Oh oh oh I, oh oh oh I\\n[Verse 1:]\\nIf I wrote...</td>\n",
       "      <td>beyonce-knowles</td>\n",
       "      <td>oh oh oh i oh oh oh i verse if i wrote book st...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>black-culture</td>\n",
       "      <td>Party the people, the people the party it's po...</td>\n",
       "      <td>beyonce-knowles</td>\n",
       "      <td>party people people party popping sitting arou...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              song                                             lyrics  \\\n",
       "0        ego-remix  Oh baby, how you doing?\\nYou know I'm gonna cu...   \n",
       "1     then-tell-me  playin' everything so easy,\\nit's like you see...   \n",
       "2          honesty  If you search\\nFor tenderness\\nIt isn't hard t...   \n",
       "3  you-are-my-rock  Oh oh oh I, oh oh oh I\\n[Verse 1:]\\nIf I wrote...   \n",
       "4    black-culture  Party the people, the people the party it's po...   \n",
       "\n",
       "            artist                                            wordBag  \n",
       "0  beyonce-knowles  oh baby you know i gon na cut right chase some...  \n",
       "1  beyonce-knowles  playin everything easy like seem sure still wa...  \n",
       "2  beyonce-knowles  if search for tenderness it hard find you love...  \n",
       "3  beyonce-knowles  oh oh oh i oh oh oh i verse if i wrote book st...  \n",
       "4  beyonce-knowles  party people people party popping sitting arou...  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Try subtract artists with less than five songs, as it is too hard for us to identify the artists with such few samples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# filter artists with less than a certain number of songs in the data set\n",
    "def filtering(df, n):\n",
    "    count = df.artist.value_counts()\n",
    "    artist = pd.DataFrame({'artist': count.index, 'counts': count.values})\n",
    "    less_artist = artist[artist['counts']< n]\n",
    "    key_diff = set(df.artist).difference(less_artist.artist)\n",
    "    where_diffkey = df.artist.isin(key_diff)\n",
    "    data_s = df[where_diffkey]\n",
    "    return data_s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_s = filtering(data, 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(116107, 4)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_s.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 376,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a326e8d30>"
      ]
     },
     "execution_count": 376,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_s.artist.value_counts().hist(bins = 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    1706.000000\n",
       "mean      109.155334\n",
       "std        67.991684\n",
       "min        50.000000\n",
       "25%        65.000000\n",
       "50%        88.000000\n",
       "75%       135.750000\n",
       "max       703.000000\n",
       "Name: artist, dtype: float64"
      ]
     },
     "execution_count": 285,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_s.artist.value_counts().describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# baseline model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# sample % data to check the baseline model\n",
    "data_sample = pd.DataFrame.sample(data_s, 20000, random_state = 124)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# split the data into training and test dataset\n",
    "train, test = train_test_split(data_s, test_size=0.2, random_state = 124)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Filter both train and test to make sure that they have same amount of artists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_s = filtering(train, 50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_m = train_s[train_s['artist'].isin(test.artist)]\n",
    "test_m = test[test.artist.isin(train_s.artist)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    706.000000\n",
       "mean     131.565156\n",
       "std       60.251312\n",
       "min       72.000000\n",
       "25%       94.000000\n",
       "50%      117.000000\n",
       "75%      140.750000\n",
       "max      549.000000\n",
       "Name: artist, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_m.artist.value_counts().describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 354,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(54, 4)"
      ]
     },
     "execution_count": 354,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_m.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We finally get 2644 artists to be identified. 40085 instances for training set and 11673 instances for test set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "try over sampling the minory class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_resampled, y_resampled = BorderlineSMOTE(k_neighbors=5).fit_resample(X_t,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "corpus = train_m['wordBag'].values.astype(str).tolist()\n",
    "y = train_m['artist']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# count the words and form a matrix X as the input features\n",
    "vectorizer = CountVectorizer(max_features=5000)\n",
    "X = vectorizer.fit_transform(corpus)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# use tf-idf to form the matrix\n",
    "vectorizer_t = TfidfVectorizer(max_features = 1000)\n",
    "X_t = vectorizer_t.fit_transform(corpus)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# add SVD to our model\n",
    "svd = TruncatedSVD(n_components=200)\n",
    "X_d = svd.fit_transform(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# use SVM as our classifier\n",
    "clf = LinearSVC()\n",
    "clf.fit(X_d,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 396,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1143: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.004065147689255549"
      ]
     },
     "execution_count": 396,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# predict the f1 score on the test set with the SVM model\n",
    "corpus_test = test_m['wordBag'].values.astype(str).tolist()\n",
    "X_test = vectorizer.fit_transform(corpus_test)\n",
    "X_test_d = svd.fit_transform(X_test)\n",
    "y_pred = clf.predict(X_test_d)\n",
    "y_true = test_m['artist']\n",
    "f1_score(y_true, y_pred, average = 'macro')  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## popularity model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "class popularityModel(object):\n",
    "    \"\"\"\n",
    "    basically is returning the Mode\n",
    "    \"\"\"\n",
    "    def __init__(self):\n",
    "        self.mode = None\n",
    "        return \n",
    "    \n",
    "    def fit(self, X, y):\n",
    "        \"\"\"\n",
    "        X: (number of examples k, number of features d.) nd array.\n",
    "        y: (number of examples, ) nd array, or panda.series.\n",
    "        \"\"\"\n",
    "        if X.shape[0] != y.shape[0]:\n",
    "            print(\"error, dim not match\")\n",
    "            return\n",
    "        self.mode = stats.mode(y.values, nan_policy='omit')[0][0]\n",
    "        \n",
    "    def predict(self, X):\n",
    "        \"\"\"\n",
    "        X: (number of examples k_1, number of features d.) nd array.\n",
    "        \"\"\"\n",
    "        if self.mode == None:\n",
    "            print(\"Please fit the model first.\")\n",
    "            return\n",
    "        \n",
    "        return np.array([self.mode] * X.shape[0])\n",
    "        \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 3 µs, sys: 0 ns, total: 3 µs\n",
      "Wall time: 6.91 µs\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/scipy/stats/stats.py:248: RuntimeWarning: The input array could not be properly checked for nan values. nan values will be ignored.\n",
      "  \"values. nan values will be ignored.\", RuntimeWarning)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1143: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1.8662757667242546e-05"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%time\n",
    "corpus_test = test_m['wordBag'].values.astype(str).tolist()\n",
    "\n",
    "X_test = vectorizer.fit_transform(corpus_test)\n",
    "X_test_d = svd.fit_transform(X_test)\n",
    "\n",
    "popuralityMod = popularityModel()\n",
    "y_true = test_m['artist']\n",
    "\n",
    "popuralityMod.fit(X_d, y)\n",
    "\n",
    "y_pred = popuralityMod.predict(X_test_d)\n",
    "f1_score(y_true, y_pred, average = 'macro') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## try less artists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "artist_100 = data.artist.value_counts()[:100]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_100 = data[data.artist.isin(artist_100.index)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "# split the data into training and test dataset\n",
    "train, test = train_test_split(data_100, test_size=0.2, random_state = 124, stratify = data_100.artist)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/scipy/stats/stats.py:248: RuntimeWarning: The input array could not be properly checked for nan values. nan values will be ignored.\n",
      "  \"values. nan values will be ignored.\", RuntimeWarning)\n"
     ]
    }
   ],
   "source": [
    "corpus = train['wordBag'].values.astype(str).tolist()\n",
    "X = vectorizer.fit_transform(corpus)\n",
    "X_d = svd.fit_transform(X)\n",
    "y = train.artist\n",
    "popuralityMod.fit(X_d, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1143: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.00044705136334812943"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "corpus_test = test['wordBag'].values.astype(str).tolist()\n",
    "\n",
    "X_test = vectorizer.fit_transform(corpus_test)\n",
    "X_test_d = svd.fit_transform(X_test)\n",
    "y_pred = popuralityMod.predict(X_test_d)\n",
    "y_true = test['artist']\n",
    "\n",
    "f1_score(y_true, y_pred, average = 'macro') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With top 100 artists, our popularity model have f1 score = 0.000447"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## top 100 artists with SVM model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/svm/base.py:931: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n",
      "  \"the number of iterations.\", ConvergenceWarning)\n",
      "/Users/mbp/anaconda3/lib/python3.7/site-packages/sklearn/metrics/classification.py:1143: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no predicted samples.\n",
      "  'precision', 'predicted', average, warn_for)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.01163759813199625"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf = LinearSVC()\n",
    "clf.fit(X_d, y)\n",
    "y_pred = clf.predict(X_test_d)\n",
    "y_true = test['artist']\n",
    "\n",
    "f1_score(y_true, y_pred, average = 'macro') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
